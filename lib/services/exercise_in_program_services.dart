import 'package:only_testosterone/models/exercise_in_program_model.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class ExerciseInProgramServices{

  static Future<void> registerExerciseInProgram(ExerciseInProgramModel exercise,int workoutProgramId) async{
    final _supClient = Supabase.instance.client;

    exercise.programId = workoutProgramId;
    
    try{
      final response = await _supClient.from('Exercises_in_Program').insert(exercise.toJson());
      if (response){
        print('$response[id] —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
      }
    }

    catch(e){
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è >> $e');
    }

    //final response = await _supClient.from().insert()

  }

  static Future<List<ExerciseInProgramModel>> fetchExercisesByProgramId(int programId) async {
    final _supClient = Supabase.instance.client;

    try {
      print('[DEBUG] –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è Program_Id: $programId');

      final response = await _supClient
          .from('Exercises_in_Program')
          .select()
          .eq('Program_Id', programId);

      print('[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç Supabase: $response');

      if (response is List) {
        final result = response.map((e) {
          print('[DEBUG] –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: $e');
          return ExerciseInProgramModel.fromJson(e);
        }).toList();

        print('[DEBUG] –í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: ${result.length}');
        return result;
      } else {
        print('‚ùå –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º!');
        return [];
      }
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: $e');
      print('üßµ StackTrace: $stackTrace');
      return [];
    }
  }

}