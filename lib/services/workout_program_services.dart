import 'package:flutter/services.dart' show rootBundle;
import 'package:only_testosterone/models/exercise_in_program_model.dart';
import 'package:only_testosterone/models/user_model.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:only_testosterone/models/workout_program_model.dart';
import 'dart:convert';

class WorkoutProgramServices {
  //–¥–æ–±–≤–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –±–¥
  static Future<void> addWorkoutProgram(String jsonPath, int userId) async {
    try {
      final _supClient = Supabase.instance.client;

      print('[DEBUG] –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –ø–æ –ø—É—Ç–∏: $jsonPath');

      // 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON-—Ñ–∞–π–ª
      final jsonString = await rootBundle.loadString(jsonPath);
      final jsonData = json.decode(jsonString);
      print('[DEBUG] JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: $jsonData');

      // 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å WorkoutProgramModel
      print('[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ Supabase...');
      final programResponse = await _supClient
          .from('Workout_programs')
          .insert({
        'User_id': userId,
        'Type': jsonData['type'],
        'Name': jsonData['name'],
        'Days_Per_Week': jsonData['number_of_days_per_week'],
        'Duration': jsonData['duration'],
      })
          .select()
          .single();

      print('[DEBUG] –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –æ—Ç–≤–µ—Ç Supabase: $programResponse');

      final int programId = programResponse['id'];
      print('[DEBUG] –ù–æ–≤—ã–π programId: $programId');

      // 3. –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      final List exercises = jsonData['exercises'];
      print('[DEBUG] –ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ${exercises.length}');
      for (int i = 0; i < exercises.length; i++) {
        final ex = exercises[i];
        print('[DEBUG] –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ #$i: $ex');

        await _supClient.from('Exercises_in_Program').insert({
          'Program_Id': programId,
          'Exercise_name': ex['name'] ?? '–ë–µ–∑ –∏–º–µ–Ω–∏',
          'Training_day': ex['training_day'].toString(),
          'Sets': ex['sets'].toString(),
          'Reps': ex['repetitions'].toString(),
          'Weight': ex['weight'] ?? 0,
          'Rest_after_set': ex['rest_after_set'].toString(),
        });

        print('[DEBUG] –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ #$i –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.');
      }

      print('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: $e');
      print('üßµ StackTrace: $stackTrace');
    }
  }

  static String generateWorkoutProgramPath({
    required String gender, // –ü–æ–ª: "–º" –∏–ª–∏ "–∂"
    required int level, // –£—Ä–æ–≤–µ–Ω—å: 0, 1, –∏–ª–∏ 2
    required int weeks, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å: 2, 4, –∏–ª–∏ 6
    required int daysPerWeek, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: 2, 3, –∏–ª–∏ 4
  }) {
    gender = gender.toLowerCase();
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    String path = 'assets/programs/p/';

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª
    path += '$gender/';

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    path += '$level/';

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å
    path += '$weeks –Ω–µ–¥–µ–ª–∏/';

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é
    path += '$daysPerWeek/TrainingProgram.json';

    return path;
  }

  static Future<List<WorkoutProgramModel>> getProgramsByUserId(
    int userId,
  ) async {
    final _supClient = Supabase.instance.client;

    try {
      final response = await _supClient
          .from('Workout_programs')
          .select()
          .eq('User_id', userId);

      if (response != null && response is List) {
        return response
            .map((json) => WorkoutProgramModel.fromJson(json))
            .toList();
      } else {
        return [];
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö - $e');
      return [];
    }
  }
}
